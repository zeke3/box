{"version":3,"file":"953.bundle.b1249b0be20f85b91181.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport OHIF, { utils, ServicesManager, ExtensionManager } from '@ohif/core';\n\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\n\nimport { Icon, Tooltip, useViewportGrid, ViewportActionBar } from '@ohif/ui';\nimport hydrateStructuredReport from '../utils/hydrateStructuredReport';\n\nconst { formatDate } = utils;\n\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\n  '@ohif/extension-measurement-tracking';\n\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\n\nfunction OHIFCornerstoneSRViewport(props) {\n  const {\n    children,\n    dataSource,\n    displaySets,\n    viewportIndex,\n    viewportLabel,\n    viewportOptions,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const {\n    displaySetService,\n    cornerstoneViewportService,\n    measurementService,\n  } = servicesManager.services;\n\n  // SR viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SR viewport should only have a single display set');\n  }\n\n  const srDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const [measurementCount, setMeasurementCount] = useState(1);\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\n    null\n  );\n  const [\n    referencedDisplaySetMetadata,\n    setReferencedDisplaySetMetadata,\n  ] = useState(null);\n  const [element, setElement] = useState(null);\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  // Optional hook into tracking extension, if present.\n  let trackedMeasurements;\n  let sendTrackedMeasurementsEvent;\n\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\n    MEASUREMENT_TRACKING_EXTENSION_ID\n  );\n\n  if (hasMeasurementTrackingExtension) {\n    const contextModule = extensionManager.getModuleEntry(\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\n    );\n\n    const tracked = useContext(contextModule.context);\n    trackedMeasurements = tracked?.[0];\n    sendTrackedMeasurementsEvent = tracked?.[1];\n  }\n  if (!sendTrackedMeasurementsEvent) {\n    // if no panels from measurement-tracking extension is used, this code will run\n    trackedMeasurements = null;\n    sendTrackedMeasurementsEvent = (eventName, { displaySetInstanceUID }) => {\n      measurementService.clearMeasurements();\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\n        { servicesManager, extensionManager },\n        displaySetInstanceUID\n      );\n      const displaySets = displaySetService.getDisplaySetsForSeries(\n        SeriesInstanceUIDs[0]\n      );\n      if (displaySets.length) {\n        viewportGridService.setDisplaySetsForViewports([\n          {\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\n          },\n        ]);\n      }\n    };\n  }\n\n  /**\n   * Store the tracking identifiers per viewport in order to be able to\n   * show the SR measurements on the referenced image on the correct viewport,\n   * when multiple viewports are used.\n   */\n  const setTrackingIdentifiers = useCallback(\n    measurementSelected => {\n      const { measurements } = srDisplaySet;\n\n      setTrackingUniqueIdentifiersForElement(\n        element,\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n        measurementSelected\n      );\n    },\n    [element, measurementSelected, srDisplaySet]\n  );\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const updateViewport = useCallback(\n    newMeasurementSelected => {\n      const {\n        StudyInstanceUID,\n        displaySetInstanceUID,\n        sopClassUids,\n      } = srDisplaySet;\n\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\n        return;\n      }\n\n      if (sopClassUids && sopClassUids.length > 1) {\n        // Todo: what happens if there are multiple SOP Classes? Why we are\n        // not throwing an error?\n        console.warn(\n          'More than one SOPClassUID in the same series is not yet supported.'\n        );\n      }\n\n      _getViewportReferencedDisplaySetData(\n        srDisplaySet,\n        newMeasurementSelected,\n        displaySetService\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\n        setMeasurementSelected(newMeasurementSelected);\n        setActiveImageDisplaySetData(referencedDisplaySet);\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\n\n        if (\n          referencedDisplaySet.displaySetInstanceUID ===\n          activeImageDisplaySetData?.displaySetInstanceUID\n        ) {\n          const { measurements } = srDisplaySet;\n\n          // it means that we have a new referenced display set, and the\n          // imageIdIndex will handle it by updating the viewport, but if they\n          // are the same we just need to use measurementService to jump to the\n          // new measurement\n          const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\n            viewportIndex\n          );\n\n          const csViewport = cornerstoneViewportService.getCornerstoneViewport(\n            viewportInfo.getViewportId()\n          );\n\n          const imageIds = csViewport.getImageIds();\n\n          const imageIdIndex = imageIds.indexOf(\n            measurements[newMeasurementSelected].imageId\n          );\n\n          if (imageIdIndex !== -1) {\n            csViewport.setImageIdIndex(imageIdIndex);\n          }\n        }\n      });\n    },\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\n  );\n\n  const getCornerstoneViewport = useCallback(() => {\n    if (!activeImageDisplaySetData) {\n      return null;\n    }\n\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { measurements } = srDisplaySet;\n    const measurement = measurements[measurementSelected];\n\n    if (!measurement) {\n      return null;\n    }\n\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\n      image => image.imageId === measurement.imageId\n    );\n\n    return (\n      <Component\n        {...props}\n        // should be passed second since we don't want SR displaySet to\n        // override the activeImageDisplaySetData\n        displaySets={[activeImageDisplaySetData]}\n        // It is possible that there is a hanging protocol applying viewportOptions\n        // for the SR, so inherit the viewport options\n        // TODO: Ensure the viewport options are set correctly with respect to\n        // stack etc, in the incoming viewport options.\n        viewportOptions={{\n          ...viewportOptions,\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\n          // viewportType should not be required, as the stack type should be\n          // required already in order to view SR, but sometimes segmentation\n          // views set the viewport type without fixing the allowed display\n          viewportType: 'stack',\n          // The positionIds for the viewport aren't meaningful for the child display sets\n          positionIds: null,\n        }}\n        onElementEnabled={onElementEnabled}\n        initialImageIndex={initialImageIndex}\n        isJumpToMeasurementDisabled={true}\n      ></Component>\n    );\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\n\n  const onMeasurementChange = useCallback(\n    direction => {\n      let newMeasurementSelected = measurementSelected;\n\n      if (direction === 'right') {\n        newMeasurementSelected++;\n\n        if (newMeasurementSelected >= measurementCount) {\n          newMeasurementSelected = 0;\n        }\n      } else {\n        newMeasurementSelected--;\n\n        if (newMeasurementSelected < 0) {\n          newMeasurementSelected = measurementCount - 1;\n        }\n      }\n\n      setTrackingIdentifiers(newMeasurementSelected);\n      updateViewport(newMeasurementSelected);\n    },\n    [\n      measurementSelected,\n      measurementCount,\n      updateViewport,\n      setTrackingIdentifiers,\n    ]\n  );\n\n  /**\n   Cleanup the SR viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Loading the measurements from the SR viewport, which goes through the\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\n   * we are changing the state here? isHydrated is always false at this stage, and\n   * if it is hydrated we don't even use the SR viewport.\n   */\n  useEffect(() => {\n    if (!srDisplaySet.isLoaded) {\n      srDisplaySet.load();\n    }\n    const numMeasurements = srDisplaySet.measurements.length;\n    setMeasurementCount(numMeasurements);\n  }, [srDisplaySet]);\n\n  /**\n   * Hook to update the tracking identifiers when the selected measurement changes or\n   * the element changes\n   */\n  useEffect(() => {\n    if (!element || !srDisplaySet.isLoaded) {\n      return;\n    }\n    setTrackingIdentifiers(measurementSelected);\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\n\n  /**\n   * Todo: what is this, not sure what it does regarding the react aspect,\n   * it is updating a local variable? which is not state.\n   */\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  useEffect(() => {\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  }, [trackedMeasurements]);\n\n  /**\n   * Data fetching for the SR displaySet, which updates the measurements and\n   * also gets the referenced image displaySet that SR is based on.\n   */\n  useEffect(() => {\n    updateViewport(measurementSelected);\n  }, [dataSource, srDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetMetadata;\n\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onMeasurementChange}\n        getStatusComponent={() =>\n          _getStatusComponent({\n            srDisplaySet,\n            viewportIndex,\n            isTracked: false,\n            isRehydratable: srDisplaySet.isRehydratable,\n            isLocked,\n            sendTrackedMeasurementsEvent,\n          })\n        }\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: SeriesDescription || '',\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  viewportLabel: PropTypes.string,\n  customProps: PropTypes.object,\n  viewportOptions: PropTypes.object,\n  viewportLabel: PropTypes.string,\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\n  extensionManager: PropTypes.instanceOf(ExtensionManager).isRequired,\n};\n\nOHIFCornerstoneSRViewport.defaultProps = {\n  customProps: {},\n};\n\nasync function _getViewportReferencedDisplaySetData(\n  displaySet,\n  measurementSelected,\n  displaySetService\n) {\n  const { measurements } = displaySet;\n  const measurement = measurements[measurementSelected];\n\n  const { displaySetInstanceUID } = measurement;\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n    displaySetInstanceUID\n  );\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\n}\n\nfunction _getStatusComponent({\n  srDisplaySet,\n  viewportIndex,\n  isRehydratable,\n  isLocked,\n  sendTrackedMeasurementsEvent,\n}) {\n  const handleMouseUp = () => {\n    sendTrackedMeasurementsEvent('HYDRATE_SR', {\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\n      viewportIndex,\n    });\n  };\n\n  const { t } = useTranslation('Common');\n  const loadStr = t('LOAD');\n\n  // 1 - Incompatible\n  // 2 - Locked\n  // 3 - Rehydratable / Open\n  const state =\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (state) {\n    case 1:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is not compatible\n          <br />\n          with this application.\n        </div>\n      );\n      break;\n    case 2:\n      StatusIcon = () => <Icon name=\"status-locked\" />;\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is currently read-only\n          <br />\n          because you are tracking measurements in\n          <br />\n          another viewport.\n        </div>\n      );\n      break;\n    case 3:\n      StatusIcon = () => <Icon name=\"status-untracked\" />;\n\n      ToolTipMessage = () => (\n        <div>{`Click ${loadStr} to restore measurements.`}</div>\n      );\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 leading-6 cursor-default text-sm text-white\">\n      <div className=\"min-w-[45px] flex items-center p-1 rounded-l-xl rounded-r bg-customgray-100\">\n        <StatusIcon />\n        <span className=\"ml-1\">SR</span>\n      </div>\n      {state === 3 && (\n        <div\n          className=\"ml-1 px-1.5 rounded cursor-pointer hover:text-black bg-primary-main hover:bg-primary-light\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={handleMouseUp}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n\nexport default OHIFCornerstoneSRViewport;\n"],"names":["formatDate","utils","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","viewportOptions","servicesManager","extensionManager","displaySetService","cornerstoneViewportService","measurementService","services","length","Error","srDisplaySet","viewportGrid","viewportGridService","useViewportGrid","measurementSelected","setMeasurementSelected","useState","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","element","setElement","viewports","activeViewportIndex","trackedMeasurements","sendTrackedMeasurementsEvent","registeredExtensionIds","includes","contextModule","getModuleEntry","tracked","useContext","context","eventName","_ref","displaySetInstanceUID","clearMeasurements","SeriesInstanceUIDs","hydrateStructuredReport","getDisplaySetsForSeries","setDisplaySetsForViewports","displaySetInstanceUIDs","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","async","displaySet","referencedDisplaySet","getDisplaySetByUID","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","_ref2","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","component","Component","initialImageIndex","findIndex","image","React","_extends","toolGroupId","viewportType","positionIds","isJumpToMeasurementDisabled","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","_ref3","activeViewport","setDisplaySetsForViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","key","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","_ref4","isRehydratable","handleMouseUp","t","useTranslation","loadStr","state","ToolTipMessage","StatusIcon","Icon","name","StatusArea","className","onMouseUp","Tooltip","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","propTypes","PropTypes","isRequired","customProps","ServicesManager","ExtensionManager","defaultProps"],"sourceRoot":""}