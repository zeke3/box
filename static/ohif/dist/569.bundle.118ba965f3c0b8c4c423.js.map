{"version":3,"file":"569.bundle.118ba965f3c0b8c4c423.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(\n  ToolGroupService,\n  customizationService,\n  toolGroupId\n) {\n  const { tools } =\n    customizationService.get('cornerstone.overlayViewportTools') ?? {};\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\n}\n\nexport default createSEGToolGroupAndAddTools;\n","async function _hydrateSEGDisplaySet({\n  segDisplaySet,\n  viewportIndex,\n  servicesManager,\n}) {\n  const {\n    segmentationService,\n    hangingProtocolService,\n    viewportGridService,\n  } = servicesManager.services;\n\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await segmentationService.createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  segmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = viewportGridService.getState();\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    viewportIndex,\n    displaySetInstanceUID\n  );\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, index) => {\n    if (index === viewportIndex) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportIndex: index,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  // Do the entire update at once\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nexport default _hydrateSEGDisplaySet;\n","import { ButtonEnums } from '@ohif/ui';\nimport hydrateSEGDisplaySet from './_hydrateSEG';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateSEG({ servicesManager, segDisplaySet, viewportIndex }) {\n  const { uiViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function(resolve, reject) {\n    const promptResult = await _askHydrate(\n      uiViewportDialogService,\n      viewportIndex\n    );\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      const isHydrated = await hydrateSEGDisplaySet({\n        segDisplaySet,\n        viewportIndex,\n        servicesManager,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(uiViewportDialogService, viewportIndex) {\n  return new Promise(function(resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportIndex,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateSEG;\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport OHIF, { utils } from '@ohif/core';\nimport {\n  LoadingIndicatorTotalPercent,\n  useViewportGrid,\n  ViewportActionBar,\n} from '@ohif/ui';\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport hydrateSEGDisplaySet from '../utils/_hydrateSEG';\nimport _getStatusComponent from './_getStatusComponent';\n\nconst { formatDate } = utils;\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const { t } = useTranslation('SEGViewport');\n\n  const {\n    displaySetService,\n    toolGroupService,\n    segmentationService,\n    uiNotificationService,\n    customizationService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    segDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const {\n      displaySet: referencedDisplaySet,\n    } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, segDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n        // initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [viewportIndex, segDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      // Segment 0 is always background\n\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      segmentationService.jumpToSegmentCenter(\n        segmentationId,\n        newSelectedSegmentIndex,\n        toolGroupId\n      );\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportIndex,\n      segDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportIndex, segDisplaySet, segIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (\n          evt.segDisplaySet.displaySetInstanceUID ===\n          segDisplaySet.displaySetInstanceUID\n        ) {\n          setSegIsLoading(false);\n        }\n\n        if (evt.overlappingSegments) {\n          uiNotificationService.show({\n            title: 'Overlapping Segments',\n            message:\n              'Overlapping segments detected which is not currently supported',\n            type: 'warning',\n          });\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    // This creates a custom tool group which has the lifetime of this view\n    // only, and does NOT interfere with currently displayed segmentations.\n    toolGroup = createSEGToolGroupAndAddTools(\n      toolGroupService,\n      customizationService,\n      toolGroupId\n    );\n\n    setToolGroupCreated(true);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n\n      // Only destroy the viewport specific implementation\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(segDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n      referencedDisplaySetRef.current = null;\n    };\n  }, [segDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const onStatusClick = async () => {\n    const isHydrated = await hydrateSEGDisplaySet({\n      segDisplaySet,\n      viewportIndex,\n      servicesManager,\n    });\n\n    setIsHydrated(isHydrated);\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onStatusClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${parseFloat(SliceThickness).toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"w-full h-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading SEG...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSEGViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSEGViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\n  const {\n    SharedFunctionalGroupsSequence: [SharedFunctionalGroup],\n  } = segDisplaySet.instance;\n  const {\n    PixelMeasuresSequence: [PixelMeasures],\n  } = SharedFunctionalGroup;\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, Tooltip } from '@ohif/ui';\n\n\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  const {t} = useTranslation(\"Common\");\n  const loadStr = t(\"LOAD\");\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => (\n        <div>This Segmentation is loaded in the segmentation panel</div>\n      );\n      break;\n  case false:\n      StatusIcon = () => <Icon name=\"status-untracked\" />;\n\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 leading-6 cursor-default text-sm text-white\">\n      <div className=\"min-w-[45px] flex items-center p-1 rounded-l-xl rounded-r bg-customgray-100\">\n        <StatusIcon />\n        <span className=\"ml-1\">SEG</span>\n      </div>\n      {!isHydrated && (\n        <div\n          className=\"ml-1 px-1.5 rounded cursor-pointer hover:text-black bg-primary-main hover:bg-primary-light\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={onStatusClick}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","async","_ref","segDisplaySet","viewportIndex","servicesManager","segmentationService","hangingProtocolService","viewportGridService","services","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForSEGDisplaySet","hydrateSegmentation","viewports","getState","updatedViewports","getViewportsRequireUpdate","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","push","viewportOptions","initialImageOptions","preset","setDisplaySetsForViewports","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","uiViewportDialogService","Promise","resolve","reject","promptResult","message","actions","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askHydrate","hydrateSEGDisplaySet","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportLabel","extensionManager","t","useTranslation","displaySetService","toolGroupService","uiNotificationService","length","Error","viewportGrid","useViewportGrid","isToolGroupCreated","setToolGroupCreated","useState","selectedSegment","setSelectedSegment","isHydrated","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","SharedFunctionalGroup","instance","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","React","_extends","viewportType","orientation","viewportId","onSegmentChange","direction","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","_ref2","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","key","onStatusClick","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","loadStr","Icon","name","StatusArea","className","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}